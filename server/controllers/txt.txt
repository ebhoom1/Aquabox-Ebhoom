// Controller to use when the Device is ON//

const mongoose = require('mongoose');

const averageTypeSchema = new mongoose.Schema({
  value: {
    type: Number,
  },
  time: {
    type: String,
  },
  date: {
    type: String,
  },
}, { _id: false });

const averageDataSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true
  },
  userName: {
    type: String,
    required: true
  },
  ph: {
    hour: averageTypeSchema,
    day: averageTypeSchema,
    week: averageTypeSchema,
    month: averageTypeSchema,
    sixMonth: averageTypeSchema,
    year: averageTypeSchema
  },
  TDS: {
    hour: averageTypeSchema,
    day: averageTypeSchema,
    week: averageTypeSchema,
    month: averageTypeSchema,
    sixMonth: averageTypeSchema,
    year: averageTypeSchema
  },
  // ... other fields
  DataIsNotReceived: {
    type: Boolean
  },
  timestamp: {
    type: Date,
    default: Date.now
  }
});

const AverageData = mongoose.model('AverageData', averageDataSchema);

module.exports = AverageData;

const IotData = require('../models/iotData');
const IotDataAverage = require('../models/averageData');

const calculateAverage = async (userId, averageType, startTime, endTime) => {
  const data = await IotData.find({
    userId: userId,
    timestamp: {
      $gte: startTime,
      $lt: endTime
    }
  });

  const fields = ['ph', 'TDS', 'turbidity', 'temperature',
    'BOD', 'COD', 'TSS', 'ORP', 'nitrate',
    'ammonicalNitrogen', 'DO', 'chloride',
    'PM10', 'PM25', 'NOH', 'NH3', 'WindSpeed',
    'WindDir', 'AirTemperature', 'Humidity',
    'solarRadiation', 'DB'];

  const currentTime = new Date().toLocaleTimeString();
  const currentDate = new Date().toLocaleDateString();

  const averageEntry = await IotDataAverage.findOne({ userId });

  if (data.length === 0) {
    if (averageEntry) {
      averageEntry.DataIsNotReceived = false;
      await averageEntry.save();
    } else {
      const newEntry = {
        userId: userId,
        userName: "",  // Handle case when data is not received, no userName available
        timestamp: new Date(),
        DataIsNotReceived: false
      };
      const newAverageEntry = new IotDataAverage(newEntry);
      await newAverageEntry.save();
    }
    return;
  }

  const averages = fields.reduce((acc, field) => {
    acc[field] = data.reduce((sum, item) => sum + parseFloat(item[field] || 0), 0) / data.length;
    return acc;
  }, {});

  if (averageEntry) {
    for (let field of fields) {
      averageEntry[field][averageType] = {
        value: averages[field],
        time: currentTime,
        date: currentDate,
      };
    }
    averageEntry.DataIsNotReceived = true;
    await averageEntry.save();
  } else {
    const newEntry = {
      userId: userId,
      userName: data[0].userName,
      timestamp: new Date(),
      DataIsNotReceived: true
    };
    for (let field of fields) {
      newEntry[field] = {
        [averageType]: {
          value: averages[field],
          time: currentTime,
          date: currentDate,
        }
      };
    }
    const newAverageEntry = new IotDataAverage(newEntry);
    await newAverageEntry.save();
  }
};

const calculateAndSaveAverages = async () => {
  const users = await IotData.distinct('userId');

  for (let userId of users) {
    const now = new Date();

    // Hourly average
    await calculateAverage(userId, 'hour', new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() - 1), now);

    // Daily average
    await calculateAverage(userId, 'day', new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1), now);

    // Monthly average
    await calculateAverage(userId, 'month', new Date(now.getFullYear(), now.getMonth() - 1), now);

    // Six-monthly average
    await calculateAverage(userId, 'sixMonth', new Date(now.getFullYear(), now.getMonth() - 6), now);

    // Yearly average
    await calculateAverage(userId, 'year', new Date(now.getFullYear() - 1), now);
  }
};

module.exports = { calculateAndSaveAverages };

// End Of Controller to use when the Device is ON //