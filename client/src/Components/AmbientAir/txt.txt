<div className="row">
          {!loading && airParameters.map((item, index) => (
            <div className="col-12 col-md-4 grid-margin" key={index}>
              <div className="card" onClick={() => handleCardClick({ title: item.parameter })}>
                <div className="card-body">
                  <div className="row">
                    <div className="col-12">
                      <h3 className="mb-3 ">{item.parameter}</h3>
                    </div>
                    <div className="col-12 mb-3">
                      <h6>
                        <strong className="strong-value"style={{color:'#236A80'}}>
                          {searchResult ? searchResult[item.name] || 'N/A' : 'No Result found for this userID'}
                        </strong> 
                        <span >{item.value}</span>
                      </h6>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        older code need to keep

        const airParameters = [
    { parameter: "Flow", value: 'm/s', name: "Flow" },
    { parameter: "CO", value: 'µg/Nm³', name: "CO" },
    { parameter: "NOX", value: 'µg/Nm³', name: "NOX" },
    { parameter: "Pressure", value: 'Pa', name: "Pressure" },
    { parameter: "PM", value: 'µg/m³', name: "PM" },
    { parameter: "SO2", value: 'µg/m³', name: "SO2" },
    { parameter: "NO2", value: 'µg/m³', name: "NO2" },
    { parameter: "Mercury", value: 'µg/m³', name: "Mercury" },
    { parameter: "PM 10", value: 'µg/m³', name: "PM10" },
    { parameter: "PM 2.5", value: 'µg/m³', name: "PM25" },
    { parameter: "NOH", value: 'µg/m³', name: "NOH" },
    { parameter: "NH3", value: 'µg/m³', name: "NH3" },
    { parameter: "Windspeed", value: 'm/s', name: "Windspeed" },
    { parameter: "Wind Dir", value: 'deg', name: "WindDir" },
    { parameter: "Temperature", value: '℃', name: "AirTemperature" },
    { parameter: "Humidity", value: '%', name: "Humidity" },
    { parameter: "Solar Radiation", value: 'w/m²', name: "solarRadiation" },
    {parameter:"Flouride",value:'µg/m',name:"Flouride"},
    {parameter:"Flouride (II)",value:'µg/m',name:"stack_2_Flouride"},
    { parameter: "PM (II)", value: 'µg/m³', name: "stack_2_PM" },
    { parameter: "NH3 (II)", value: 'µg/m³', name: "stack_2_NH3" },
    {parameter:"Flouride (III)",value:'µg/m',name:"STACK_32_Ammonia_Flouride"},
    { parameter: "PM (III)", value: 'µg/m³', name: "STACK_32_Ammonia_PM" },
    { parameter: "NH3 (III)", value: 'µg/m³', name: "STACK_32_Ammonia_NH3" },
    
  ];


  const fetchHistoryData = async (fromDate, toDate) => {
    // Logic to fetch history data based on the date range
    console.log('Fetching data from:', fromDate, 'to:', toDate);
    // Example API call:
    // const data = await dispatch(fetchHistoryDataByDate({ fromDate, toDate })).unwrap();
  };
  const downloadHistoryData = (fromDate, toDate) => {
    // Logic to download history data based on the date range
    console.log('Downloading data from:', fromDate, 'to:', toDate);
    // Example API call:
    // downloadData({ fromDate, toDate });
  };